Justin Ma
604805167

	The most notable obstacle I overcame was the unionWithNoDuplicates function. Solving the problem was mostly conceptual. At first I tried to eliminate duplicates in an array, but that was very difficult, so I changed my strategy to copying a string into the resulting array one at a time. each time, I would check if that string was already in the resulting array or not. Once I figured out in my head how a function could complete the task logically, writing the function was not too bad. I had to learn about going through strings in an array one at a time, but this was very similar to going through the characters of a string one at a time. I learned that I could not cout an array. Instead I had to cout every string inside it, one at a time. I also learned I could not create an array with a variable size. 

Test cases for:

locateMinimum
	when n = 0 (array,0)
	when n is negative (array,-5)
	when there are multiple minimums ({“a”,”a”},2)
	normal input test for correctness ({“a”,”aa”,ba”,”c”},4)

findLastOccurrence
	when n = 0 (array,0,”a”)
	when n is negative (array,-5,”a”)
	when there are multiple occurrences ({“a”,”a”},2,”a”)
	when there are no occurrences ({“a”,”a”},2,”b”)
	normal input test for correctness ({“a”,”aa”,ba”,”c”},4,”ba”)

flipAround
	when n is negative (array,-5)
	when n = 0 (array,0) - should return 0
	when the size of the array is 1 ({“a”},1)
	normal input test for correctness ({“a”,”aa”,ba”,”c”},4)

hasNoDuplicates
	when n is negative (array,-5)
	when n = 0 (array,0) - should return true
	when there are duplicates({“a”,”a”},2)
	normal input test for correctness ({“a”,”aa”,ba”,”c”},4)

unionWithNoDuplicates
	when n1/n2 = 0 (array1,0,array2,0,result,size)
	when n1/n2 is negative (array1,-2,array2,-3,result,size)
	when there are duplicates ({“a”,”b”,”a”},3,{“b”,”c”,”b”},2,result,size)

shiftRight
	when n/amount = 0 (array,0,0,”c”) - should return 0
	when n < amount (array,5,7,”c”)
	when n = amount (array,5,5,”c”) - should return 0
	when n/amount are negative (array,-5,-2,”c”)
	normal input test for correctness ({“a”,”aa”,ba”,”c”},4,2,”c”)

isInIncreasingOrder
	when n = 0 (array,0)
	when n is negative (array,-5)
	when not increasing ({“b”,”a”},2)
	normal input test for correctness ({“a”,”aa”,ba”,”c”},4)








